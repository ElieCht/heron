library(devtools)
usethis::use_r("demi_perimetre")
usethis::use_r("heron")
library(devtools)
usethis::use_r("demi_perimetre")
demi_perimetre <- function(a, b, c) {
(a + b + c) / 2
}
devtools::document()
rm(list = c("demi_perimetre"))
devtools::document()
#' Title
#'
#' @param a longueur du premier côté du triangle
#' @param b longueur du deuxième côté du triangle
#' @param c longueur du troisième côté du triagnle
#'
#' @return l'aire du triangle
#' @export
#'
#' @examples
calc_aire_heron <- function(a, b, c) {
s <- demi_perimetre(a, b, c)
sqrt(s * (s - a) * (s - b) * (s - c))
}
#' Title
#'
#' @param a longueur du premier côté du triangle
#' @param b longueur du deuxième côté du triangle
#' @param c longueur du troisième côté du triagnle
#'
#' @return l'aire du triangle
#' @export
#'
#' @examples
heron <- function(a, b, c) {
s <- demi_perimetre(a, b, c)
sqrt(s * (s - a) * (s - b) * (s - c))
}
heron::calc_aire_heron(1,2,3)
#' Fonction permettant de calculer le demi perimètre d'un triangle
#'
#' @param a longueur du premier côté du triangle
#' @param b longueur du deuxième côté du triangle
#' @param c longueur du troisième côté du triangle
#'
#' @return le demi-perimètre d'un triangle
#'
#' @noRd
demi_perimetre <- function(a, b, c) {
(a + b + c) / 2
}
#' Calcul de l'aire d'un triangle avec la formule de héron
#'
#' @param a longueur du premier côté du triangle
#' @param b longueur du deuxième côté du triangle
#' @param c longueur du troisième côté du triagnle
#'
#' @return l'aire du triangle
#' @export
#'
#' @examples
heron <- function(a, b, c) {
s <- demi_perimetre(a, b, c)
sqrt(s * (s - a) * (s - b) * (s - c))
}
heron(1,2,3)
heron(8,10,22)
heron(6,4,3)
heron(5,3,1)
heron(7,5,3)
devtools::document()
?heron
?demi_perimetre
?heron
usethis::use_r("heron_bis")
devtools::document()
?heron_bis
usethis::use_test("demi_perimetre")
library(testthat)
test_that("multiplication works", {
expect_equal(demi_perimetre(2,2,2), 3)
})
test_that("multiplication works", {
expect_equal(demi_perimetre(2,2,2), 3)
epect_equal(demi_perimetre(4,4,4), 6)
})
test_that("multiplication works", {
expect_equal(demi_perimetre(2,2,2), 3)
expect_equal(demi_perimetre(4,4,4), 6)
})
usethis::use_test("heron_bis")
heron_bis(5,4,3)
heron_bis(5,2,2)
heron_bis(1,1,1)
heron_bis(6,4,3)
heron_bis(-1,5,6)
test_that("multiplication works", {
expect_equal(heron_bis(5,4,3), 6)
expect_error(heron_bis(-5,4,3))
})
heron_bis(0,3,3)
heron_bis(3,0,3)
heron_bis(3,1,3)
test_that("multiplication works", {
expect_equal(heron_bis(5,4,3), 6)
expect_error(heron_bis(-5,4,3))
expect_error(heron-bis(5, 2, 2))
})
demi_perimetre(1,1,1)
demi_perimetre(0,0,0)
heron_bis(0,0,0)
heron_bis(5,2,0)
test_that("multiplication works", {
expect_equal(heron_bis(5, 4, 3), 6)
expect_error(heron_bis(-5, 4, 3))
expect_error(heron_bis(5, 2, 0))
expect_error(heron-bis(5, 2, 2))
})
devtools::load_all()
